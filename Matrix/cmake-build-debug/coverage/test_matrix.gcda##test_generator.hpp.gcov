        -:    0:Source:/home/minerkow/Рабочий стол/2nd_Course/Matrix/test/test_generator.hpp
        -:    0:Graph:/home/minerkow/Рабочий стол/2nd_Course/Matrix/cmake-build-debug/CMakeFiles/test_matrix.dir/test/test_matrix.gcno
        -:    0:Data:/home/minerkow/Рабочий стол/2nd_Course/Matrix/cmake-build-debug/CMakeFiles/test_matrix.dir/test/test_matrix.gcda
        -:    0:Runs:2
        -:    1:#include "../Matrix.hpp"
        -:    2:#include <random>
        -:    3:
        -:    4:namespace matrixgen {
        -:    5:
        -:    6:    enum {MAX_VALUE_L = 1, MAX_VALUE_U = 2};
        -:    7:    class MatrixGenerator_t {
        -:    8:    public:
        -:    9:        MatrixGenerator_t(size_t size);
        -:   10:
        -:   11:        friend std::ostream& operator<<(std::ostream& os, MatrixGenerator_t& matrixGenerator);
        -:   12:
        -:   13:        mtrx::Matrix_t<int> matrix_;
        -:   14:        double determinant_;
        -:   15:    };
        -:   16:
    #####:   17:    MatrixGenerator_t::MatrixGenerator_t(size_t size) {
    %%%%%:   17-block  0
    $$$$$:   17-block  1
    #####:   18:        mtrx::Matrix_t<int> L{size, size};
    $$$$$:   18-block  0
    #####:   19:        mtrx::Matrix_t<int> U{size, size};
    %%%%%:   19-block  0
    $$$$$:   19-block  1
    #####:   20:        std::random_device rd;
    %%%%%:   20-block  0
    $$$$$:   20-block  1
    #####:   21:        std::mt19937 mersenne(rd());
    %%%%%:   21-block  0
    %%%%%:   21-block  1
    #####:   22:        double detL = 1.0;
    #####:   23:        for (size_t n = 0; n < L.Num_Rows(); ++n) {
    %%%%%:   23-block  0
    %%%%%:   23-block  1
    %%%%%:   23-block  2
    #####:   24:            for (size_t m = n; m < L.Num_Columns(); ++m) {
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    #####:   25:                L[n][m] = mersenne() % MAX_VALUE_L + 1;
    %%%%%:   25-block  0
    %%%%%:   25-block  1
    %%%%%:   25-block  2
    #####:   26:                if (n == m) {
    %%%%%:   26-block  0
    #####:   27:                    L[n][m] = mersenne() % MAX_VALUE_L + 1;
    %%%%%:   27-block  0
    %%%%%:   27-block  1
    %%%%%:   27-block  2
    #####:   28:                    detL *= L[n][m];
    %%%%%:   28-block  0
    %%%%%:   28-block  1
    %%%%%:   28-block  2
        -:   29:                }
        -:   30:            }
        -:   31:        }
        -:   32:
    #####:   33:        for (size_t n = 0; n < L.Num_Rows(); ++n) {
    %%%%%:   33-block  0
    %%%%%:   33-block  1
    %%%%%:   33-block  2
    #####:   34:            for (size_t m = 0; m <= n; ++m) {
    %%%%%:   34-block  0
    %%%%%:   34-block  1
    %%%%%:   34-block  2
    #####:   35:                U[n][m] = mersenne() % MAX_VALUE_U;
    %%%%%:   35-block  0
    %%%%%:   35-block  1
    %%%%%:   35-block  2
    #####:   36:                if (n == m) {
    %%%%%:   36-block  0
    #####:   37:                    U[n][m] = 1.0;
    %%%%%:   37-block  0
    %%%%%:   37-block  1
    %%%%%:   37-block  2
        -:   38:                }
        -:   39:            }
        -:   40:        }
        -:   41:
    #####:   42:        matrix_ = L.Matrix_Mult(U);
    %%%%%:   42-block  0
    %%%%%:   42-block  1
    %%%%%:   42-block  2
    $$$$$:   42-block  3
    $$$$$:   42-block  4
        -:   43:
    #####:   44:        determinant_ = detL;
    #####:   45:    }
        -:   46:
    #####:   47:    std::ostream &operator<<(std::ostream &os, MatrixGenerator_t &matrixGenerator) {
    #####:   48:        os << matrixGenerator.matrix_;
    %%%%%:   48-block  0
    #####:   49:        return os;
        -:   50:    }
        -:   51:
        -:   52:}
