        -:    0:Source:/usr/include/c++/9/bits/regex_compiler.tcc
        -:    0:Graph:/home/minerkow/Рабочий стол/2nd_Course/Matrix/cmake-build-debug/CMakeFiles/Matrix.dir/main.gcno
        -:    0:Data:/home/minerkow/Рабочий стол/2nd_Course/Matrix/cmake-build-debug/CMakeFiles/Matrix.dir/main.gcda
        -:    0:Runs:1
        -:    1:// class template regex -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2013-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/**
        -:   26: *  @file bits/regex_compiler.tcc
        -:   27: *  This is an internal header file, included by other library headers.
        -:   28: *  Do not attempt to use it directly. @headername{regex}
        -:   29: */
        -:   30:
        -:   31:// FIXME make comments doxygen format.
        -:   32:
        -:   33:/*
        -:   34:// This compiler refers to "Regular Expression Matching Can Be Simple And Fast"
        -:   35:// (http://swtch.com/~rsc/regexp/regexp1.html),
        -:   36:// but doesn't strictly follow it.
        -:   37://
        -:   38:// When compiling, states are *chained* instead of tree- or graph-constructed.
        -:   39:// It's more like structured programs: there's if statement and loop statement.
        -:   40://
        -:   41:// For alternative structure (say "a|b"), aka "if statement", two branches
        -:   42:// should be constructed. However, these two shall merge to an "end_tag" at
        -:   43:// the end of this operator:
        -:   44://
        -:   45://                branch1
        -:   46://              /        \
        -:   47:// => begin_tag            end_tag =>
        -:   48://              \        /
        -:   49://                branch2
        -:   50://
        -:   51:// This is the difference between this implementation and that in Russ's
        -:   52:// article.
        -:   53://
        -:   54:// That's why we introduced dummy node here ------ "end_tag" is a dummy node.
        -:   55:// All dummy nodes will be eliminated at the end of compilation.
        -:   56:*/
        -:   57:
        -:   58:namespace std _GLIBCXX_VISIBILITY(default)
        -:   59:{
        -:   60:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   61:
        -:   62:namespace __detail
        -:   63:{
        -:   64:  template<typename _TraitsT>
        1:   65:    _Compiler<_TraitsT>::
        -:   66:    _Compiler(_IterT __b, _IterT __e,
        -:   67:	      const typename _TraitsT::locale_type& __loc, _FlagT __flags)
        -:   68:    : _M_flags((__flags
        1:   69:		& (regex_constants::ECMAScript
        1:   69-block  0
        -:   70:		   | regex_constants::basic
        -:   71:		   | regex_constants::extended
        -:   72:		   | regex_constants::grep
        -:   73:		   | regex_constants::egrep
        -:   74:		   | regex_constants::awk))
        -:   75:	       ? __flags
    #####:   76:	       : __flags | regex_constants::ECMAScript),
    %%%%%:   76-block  0
        -:   77:      _M_scanner(__b, __e, _M_flags, __loc),
        1:   78:      _M_nfa(make_shared<_RegexT>(__loc, _M_flags)),
        1:   79:      _M_traits(_M_nfa->_M_traits),
        1:   79-block  0
        2:   80:      _M_ctype(std::use_facet<_CtypeT>(__loc))
        1:   80-block  0
        1:   80-block  1
        1:   80-block  2
        1:   80-block  3
    $$$$$:   80-block  4
    $$$$$:   80-block  5
    $$$$$:   80-block  6
    $$$$$:   80-block  7
    $$$$$:   80-block  8
    $$$$$:   80-block  9
        -:   81:    {
        1:   82:      _StateSeqT __r(*_M_nfa, _M_nfa->_M_start());
        1:   82-block  0
        1:   83:      __r._M_append(_M_nfa->_M_insert_subexpr_begin());
        1:   83-block  0
        1:   84:      this->_M_disjunction();
        1:   85:      if (!_M_match_token(_ScannerT::_S_token_eof))
        1:   85-block  0
        1:   85-block  1
    #####:   86:	__throw_regex_error(regex_constants::error_paren);
    %%%%%:   86-block  0
        1:   87:      __r._M_append(_M_pop());
        1:   87-block  0
        1:   87-block  1
        -:   88:      __glibcxx_assert(_M_stack.empty());
        1:   89:      __r._M_append(_M_nfa->_M_insert_subexpr_end());
        1:   89-block  0
        1:   90:      __r._M_append(_M_nfa->_M_insert_accept());
        1:   90-block  0
        1:   91:      _M_nfa->_M_eliminate_dummy();
        1:   92:    }
        1:   92-block  0
        -:   93:
        -:   94:  template<typename _TraitsT>
        -:   95:    void
       11:   96:    _Compiler<_TraitsT>::
        -:   97:    _M_disjunction()
        -:   98:    {
       11:   99:      this->_M_alternative();
       11:   99-block  0
       11:  100:      while (_M_match_token(_ScannerT::_S_token_or))
       11:  100-block  0
        -:  101:	{
    #####:  102:	  _StateSeqT __alt1 = _M_pop();
    %%%%%:  102-block  0
    #####:  103:	  this->_M_alternative();
    %%%%%:  103-block  0
    #####:  104:	  _StateSeqT __alt2 = _M_pop();
    %%%%%:  104-block  0
    #####:  105:	  auto __end = _M_nfa->_M_insert_dummy();
    %%%%%:  105-block  0
    #####:  106:	  __alt1._M_append(__end);
    %%%%%:  106-block  0
    #####:  107:	  __alt2._M_append(__end);
        -:  108:	  // __alt2 is state._M_next, __alt1 is state._M_alt. The executor
        -:  109:	  // executes _M_alt before _M_next, as well as executing left
        -:  110:	  // alternative before right one.
    #####:  111:	  _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  111-block  0
    %%%%%:  111-block  1
    $$$$$:  111-block  2
    #####:  112:				   _M_nfa->_M_insert_alt(
        -:  113:				     __alt2._M_start, __alt1._M_start, false),
        -:  114:				   __end));
        -:  115:	}
       11:  116:    }
       11:  116-block  0
        -:  117:
        -:  118:  template<typename _TraitsT>
        -:  119:    void
       41:  120:    _Compiler<_TraitsT>::
        -:  121:    _M_alternative()
        -:  122:    {
       41:  123:      if (this->_M_term())
       41:  123-block  0
        -:  124:	{
       30:  125:	  _StateSeqT __re = _M_pop();
       30:  125-block  0
       30:  126:	  this->_M_alternative();
       30:  126-block  0
       30:  127:	  __re._M_append(_M_pop());
       30:  127-block  0
       30:  127-block  1
       30:  128:	  _M_stack.push(__re);
        -:  129:	}
        -:  130:      else
       11:  131:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_dummy()));
       11:  131-block  0
       11:  131-block  1
       41:  132:    }
       41:  132-block  0
        -:  133:
        -:  134:  template<typename _TraitsT>
        -:  135:    bool
       41:  136:    _Compiler<_TraitsT>::
        -:  137:    _M_term()
        -:  138:    {
       41:  139:      if (this->_M_assertion())
       41:  139-block  0
    #####:  140:	return true;
    %%%%%:  140-block  0
       41:  141:      if (this->_M_atom())
       41:  141-block  0
        -:  142:	{
       46:  143:	  while (this->_M_quantifier());
       46:  143-block  0
       30:  144:	  return true;
       30:  144-block  0
        -:  145:	}
       11:  146:      return false;
       11:  146-block  0
        -:  147:    }
        -:  148:
        -:  149:  template<typename _TraitsT>
        -:  150:    bool
       41:  151:    _Compiler<_TraitsT>::
        -:  152:    _M_assertion()
        -:  153:    {
       41:  154:      if (_M_match_token(_ScannerT::_S_token_line_begin))
       41:  154-block  0
    #####:  155:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_line_begin()));
    %%%%%:  155-block  0
    %%%%%:  155-block  1
    $$$$$:  155-block  2
       41:  156:      else if (_M_match_token(_ScannerT::_S_token_line_end))
       41:  156-block  0
    #####:  157:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->_M_insert_line_end()));
    %%%%%:  157-block  0
    %%%%%:  157-block  1
    $$$$$:  157-block  2
       41:  158:      else if (_M_match_token(_ScannerT::_S_token_word_bound))
       41:  158-block  0
        -:  159:	// _M_value[0] == 'n' means it's negative, say "not word boundary".
    #####:  160:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->
    %%%%%:  160-block  0
    %%%%%:  160-block  1
    $$$$$:  160-block  2
    #####:  161:	      _M_insert_word_bound(_M_value[0] == 'n')));
       41:  162:      else if (_M_match_token(_ScannerT::_S_token_subexpr_lookahead_begin))
       41:  162-block  0
        -:  163:	{
    #####:  164:	  auto __neg = _M_value[0] == 'n';
    %%%%%:  164-block  0
    #####:  165:	  this->_M_disjunction();
    %%%%%:  165-block  0
    #####:  166:	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
    %%%%%:  166-block  0
    %%%%%:  166-block  1
    #####:  167:	    __throw_regex_error(regex_constants::error_paren,
    %%%%%:  167-block  0
        -:  168:				"Parenthesis is not closed.");
    #####:  169:	  auto __tmp = _M_pop();
    %%%%%:  169-block  0
    #####:  170:	  __tmp._M_append(_M_nfa->_M_insert_accept());
    %%%%%:  170-block  0
    %%%%%:  170-block  1
    #####:  171:	  _M_stack.push(
    %%%%%:  171-block  0
    $$$$$:  171-block  1
        -:  172:	      _StateSeqT(
    #####:  173:		*_M_nfa,
    %%%%%:  173-block  0
    #####:  174:		_M_nfa->_M_insert_lookahead(__tmp._M_start, __neg)));
        -:  175:	}
        -:  176:      else
       41:  177:	return false;
       41:  177-block  0
    #####:  178:      return true;
    %%%%%:  178-block  0
        -:  179:    }
        -:  180:
        -:  181:  template<typename _TraitsT>
        -:  182:    bool
       46:  183:    _Compiler<_TraitsT>::
        -:  184:    _M_quantifier()
        -:  185:    {
       46:  186:      bool __neg = (_M_flags & regex_constants::ECMAScript);
       46:  186-block  0
      110:  187:      auto __init = [this, &__neg]()
        -:  188:	{
       16:  189:	  if (_M_stack.empty())
       16:  189-block  0
    #####:  190:	    __throw_regex_error(regex_constants::error_badrepeat,
    %%%%%:  190-block  0
        -:  191:				"Nothing to repeat before a quantifier.");
      16*:  192:	  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);
       16:  192-block  0
       16:  192-block  1
    %%%%%:  192-block  2
       16:  192-block  3
        -:  193:	};
       46:  194:      if (_M_match_token(_ScannerT::_S_token_closure0))
       46:  194-block  0
        -:  195:	{
        7:  196:	  __init();
        7:  196-block  0
        7:  197:	  auto __e = _M_pop();
        7:  197-block  0
        7:  198:	  _StateSeqT __r(*_M_nfa,
        7:  198-block  0
        7:  199:			 _M_nfa->_M_insert_repeat(_S_invalid_state_id,
        7:  199-block  0
        -:  200:						  __e._M_start, __neg));
        7:  201:	  __e._M_append(__r);
        7:  202:	  _M_stack.push(__r);
        -:  203:	}
       39:  204:      else if (_M_match_token(_ScannerT::_S_token_closure1))
       39:  204-block  0
       39:  204-block  1
        -:  205:	{
        4:  206:	  __init();
        4:  206-block  0
        4:  207:	  auto __e = _M_pop();
        4:  207-block  0
        4:  208:	  __e._M_append(_M_nfa->_M_insert_repeat(_S_invalid_state_id,
        4:  208-block  0
        4:  208-block  1
        -:  209:						 __e._M_start, __neg));
        4:  210:	  _M_stack.push(__e);
        -:  211:	}
       35:  212:      else if (_M_match_token(_ScannerT::_S_token_opt))
       35:  212-block  0
       35:  212-block  1
        -:  213:	{
        5:  214:	  __init();
        5:  214-block  0
        5:  215:	  auto __e = _M_pop();
        5:  215-block  0
        5:  216:	  auto __end = _M_nfa->_M_insert_dummy();
        5:  216-block  0
        5:  217:	  _StateSeqT __r(*_M_nfa,
        5:  217-block  0
        5:  218:			 _M_nfa->_M_insert_repeat(_S_invalid_state_id,
        5:  218-block  0
        -:  219:						  __e._M_start, __neg));
        5:  220:	  __e._M_append(__end);
        5:  221:	  __r._M_append(__end);
        5:  222:	  _M_stack.push(__r);
        -:  223:	}
       30:  224:      else if (_M_match_token(_ScannerT::_S_token_interval_begin))
       30:  224-block  0
       30:  224-block  1
        -:  225:	{
    #####:  226:	  if (_M_stack.empty())
    %%%%%:  226-block  0
    #####:  227:	    __throw_regex_error(regex_constants::error_badrepeat,
    %%%%%:  227-block  0
        -:  228:				"Nothing to repeat before a quantifier.");
    #####:  229:	  if (!_M_match_token(_ScannerT::_S_token_dup_count))
    %%%%%:  229-block  0
    %%%%%:  229-block  1
    #####:  230:	    __throw_regex_error(regex_constants::error_badbrace,
    %%%%%:  230-block  0
        -:  231:				"Unexpected token in brace expression.");
    #####:  232:	  _StateSeqT __r(_M_pop());
    %%%%%:  232-block  0
    #####:  233:	  _StateSeqT __e(*_M_nfa, _M_nfa->_M_insert_dummy());
    %%%%%:  233-block  0
    %%%%%:  233-block  1
    #####:  234:	  long __min_rep = _M_cur_int_value(10);
    #####:  235:	  bool __infi = false;
        -:  236:	  long __n;
        -:  237:
        -:  238:	  // {3
    #####:  239:	  if (_M_match_token(_ScannerT::_S_token_comma))
    %%%%%:  239-block  0
    %%%%%:  239-block  1
    #####:  240:	    if (_M_match_token(_ScannerT::_S_token_dup_count)) // {3,7}
    %%%%%:  240-block  0
    %%%%%:  240-block  1
    #####:  241:	      __n = _M_cur_int_value(10) - __min_rep;
    %%%%%:  241-block  0
    %%%%%:  241-block  1
        -:  242:	    else
    #####:  243:	      __infi = true;
    %%%%%:  243-block  0
        -:  244:	  else
    #####:  245:	    __n = 0;
    %%%%%:  245-block  0
    #####:  246:	  if (!_M_match_token(_ScannerT::_S_token_interval_end))
    %%%%%:  246-block  0
    %%%%%:  246-block  1
    #####:  247:	    __throw_regex_error(regex_constants::error_brace,
    %%%%%:  247-block  0
        -:  248:				"Unexpected end of brace expression.");
        -:  249:
    #####:  250:	  __neg = __neg && _M_match_token(_ScannerT::_S_token_opt);
    %%%%%:  250-block  0
    %%%%%:  250-block  1
    %%%%%:  250-block  2
    %%%%%:  250-block  3
    %%%%%:  250-block  4
        -:  251:
    #####:  252:	  for (long __i = 0; __i < __min_rep; ++__i)
    %%%%%:  252-block  0
    %%%%%:  252-block  1
    #####:  253:	    __e._M_append(__r._M_clone());
    %%%%%:  253-block  0
    %%%%%:  253-block  1
        -:  254:
    #####:  255:	  if (__infi)
    %%%%%:  255-block  0
        -:  256:	    {
    #####:  257:	      auto __tmp = __r._M_clone();
    %%%%%:  257-block  0
    #####:  258:	      _StateSeqT __s(*_M_nfa,
    %%%%%:  258-block  0
    #####:  259:			     _M_nfa->_M_insert_repeat(_S_invalid_state_id,
    %%%%%:  259-block  0
        -:  260:						      __tmp._M_start, __neg));
    #####:  261:	      __tmp._M_append(__s);
    #####:  262:	      __e._M_append(__s);
        -:  263:	    }
        -:  264:	  else
        -:  265:	    {
    #####:  266:	      if (__n < 0)
    %%%%%:  266-block  0
    #####:  267:		__throw_regex_error(regex_constants::error_badbrace,
    %%%%%:  267-block  0
        -:  268:				    "Invalid range in brace expression.");
    #####:  269:	      auto __end = _M_nfa->_M_insert_dummy();
    %%%%%:  269-block  0
        -:  270:	      // _M_alt is the "match more" branch, and _M_next is the
        -:  271:	      // "match less" one. Switch _M_alt and _M_next of all created
        -:  272:	      // nodes. This is a hack but IMO works well.
    #####:  273:	      std::stack<_StateIdT> __stack;
    %%%%%:  273-block  0
    %%%%%:  273-block  1
    $$$$$:  273-block  2
    #####:  274:	      for (long __i = 0; __i < __n; ++__i)
    %%%%%:  274-block  0
    %%%%%:  274-block  1
        -:  275:		{
    #####:  276:		  auto __tmp = __r._M_clone();
    %%%%%:  276-block  0
    #####:  277:		  auto __alt = _M_nfa->_M_insert_repeat(__tmp._M_start,
    %%%%%:  277-block  0
        -:  278:							__end, __neg);
    #####:  279:		  __stack.push(__alt);
    %%%%%:  279-block  0
    #####:  280:		  __e._M_append(_StateSeqT(*_M_nfa, __alt, __tmp._M_end));
    %%%%%:  280-block  0
        -:  281:		}
    #####:  282:	      __e._M_append(__end);
    %%%%%:  282-block  0
    #####:  283:	      while (!__stack.empty())
    %%%%%:  283-block  0
        -:  284:		{
    #####:  285:		  auto& __tmp = (*_M_nfa)[__stack.top()];
    %%%%%:  285-block  0
    #####:  286:		  __stack.pop();
    #####:  287:		  std::swap(__tmp._M_next, __tmp._M_alt);
        -:  288:		}
        -:  289:	    }
    #####:  290:	  _M_stack.push(__e);
    %%%%%:  290-block  0
        -:  291:	}
        -:  292:      else
       30:  293:	return false;
       30:  293-block  0
       16:  294:      return true;
       16:  294-block  0
        -:  295:    }
        -:  296:
        -:  297:#define __INSERT_REGEX_MATCHER(__func, ...)\
        -:  298:	do {\
        -:  299:	  if (!(_M_flags & regex_constants::icase))\
        -:  300:	    if (!(_M_flags & regex_constants::collate))\
        -:  301:	      __func<false, false>(__VA_ARGS__);\
        -:  302:	    else\
        -:  303:	      __func<false, true>(__VA_ARGS__);\
        -:  304:	  else\
        -:  305:	    if (!(_M_flags & regex_constants::collate))\
        -:  306:	      __func<true, false>(__VA_ARGS__);\
        -:  307:	    else\
        -:  308:	      __func<true, true>(__VA_ARGS__);\
        -:  309:	} while (false)
        -:  310:
        -:  311:  template<typename _TraitsT>
        -:  312:    bool
       41:  313:    _Compiler<_TraitsT>::
        -:  314:    _M_atom()
        -:  315:    {
       41:  316:      if (_M_match_token(_ScannerT::_S_token_anychar))
       41:  316-block  0
        -:  317:	{
    #####:  318:	  if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  318-block  0
    #####:  319:	    __INSERT_REGEX_MATCHER(_M_insert_any_matcher_posix);
    %%%%%:  319-block  0
    %%%%%:  319-block  1
    %%%%%:  319-block  2
    %%%%%:  319-block  3
    %%%%%:  319-block  4
    %%%%%:  319-block  5
    %%%%%:  319-block  6
        -:  320:	  else
    #####:  321:	    __INSERT_REGEX_MATCHER(_M_insert_any_matcher_ecma);
    %%%%%:  321-block  0
    %%%%%:  321-block  1
    %%%%%:  321-block  2
    %%%%%:  321-block  3
    %%%%%:  321-block  4
    %%%%%:  321-block  5
    %%%%%:  321-block  6
        -:  322:	}
       41:  323:      else if (_M_try_char())
       41:  323-block  0
       3*:  324:	__INSERT_REGEX_MATCHER(_M_insert_char_matcher);
        3:  324-block  0
        3:  324-block  1
        3:  324-block  2
    %%%%%:  324-block  3
    %%%%%:  324-block  4
    %%%%%:  324-block  5
    %%%%%:  324-block  6
       38:  325:      else if (_M_match_token(_ScannerT::_S_token_backref))
       38:  325-block  0
    #####:  326:	_M_stack.push(_StateSeqT(*_M_nfa, _M_nfa->
    %%%%%:  326-block  0
    %%%%%:  326-block  1
    $$$$$:  326-block  2
        -:  327:				 _M_insert_backref(_M_cur_int_value(10))));
       38:  328:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
       38:  328-block  0
      12*:  329:	__INSERT_REGEX_MATCHER(_M_insert_character_class_matcher);
       12:  329-block  0
       12:  329-block  1
       12:  329-block  2
    %%%%%:  329-block  3
    %%%%%:  329-block  4
    %%%%%:  329-block  5
    %%%%%:  329-block  6
       26:  330:      else if (_M_match_token(_ScannerT::_S_token_subexpr_no_group_begin))
       26:  330-block  0
        -:  331:	{
    #####:  332:	  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_dummy());
    %%%%%:  332-block  0
    %%%%%:  332-block  1
    #####:  333:	  this->_M_disjunction();
    #####:  334:	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
    %%%%%:  334-block  0
    %%%%%:  334-block  1
    #####:  335:	    __throw_regex_error(regex_constants::error_paren,
    %%%%%:  335-block  0
        -:  336:				"Parenthesis is not closed.");
    #####:  337:	  __r._M_append(_M_pop());
    %%%%%:  337-block  0
    %%%%%:  337-block  1
    #####:  338:	  _M_stack.push(__r);
        -:  339:	}
       26:  340:      else if (_M_match_token(_ScannerT::_S_token_subexpr_begin))
       26:  340-block  0
        -:  341:	{
       10:  342:	  _StateSeqT __r(*_M_nfa, _M_nfa->_M_insert_subexpr_begin());
       10:  342-block  0
       10:  342-block  1
       10:  343:	  this->_M_disjunction();
       10:  344:	  if (!_M_match_token(_ScannerT::_S_token_subexpr_end))
       10:  344-block  0
       10:  344-block  1
    #####:  345:	    __throw_regex_error(regex_constants::error_paren,
    %%%%%:  345-block  0
        -:  346:				"Parenthesis is not closed.");
       10:  347:	  __r._M_append(_M_pop());
       10:  347-block  0
       10:  347-block  1
       10:  348:	  __r._M_append(_M_nfa->_M_insert_subexpr_end());
       10:  348-block  0
       10:  349:	  _M_stack.push(__r);
        -:  350:	}
       16:  351:      else if (!_M_bracket_expression())
       16:  351-block  0
       11:  352:	return false;
       11:  352-block  0
       30:  353:      return true;
       30:  353-block  0
        -:  354:    }
        -:  355:
        -:  356:  template<typename _TraitsT>
        -:  357:    bool
       16:  358:    _Compiler<_TraitsT>::
        -:  359:    _M_bracket_expression()
        -:  360:    {
       16:  361:      bool __neg =
       16:  361-block  0
        -:  362:	_M_match_token(_ScannerT::_S_token_bracket_neg_begin);
       16:  363:      if (!(__neg || _M_match_token(_ScannerT::_S_token_bracket_begin)))
       16:  363-block  0
       11:  363-block  1
        5:  363-block  2
       16:  363-block  3
       11:  364:	return false;
       11:  364-block  0
       5*:  365:      __INSERT_REGEX_MATCHER(_M_insert_bracket_matcher, __neg);
        5:  365-block  0
        5:  365-block  1
        5:  365-block  2
    %%%%%:  365-block  3
    %%%%%:  365-block  4
    %%%%%:  365-block  5
    %%%%%:  365-block  6
        5:  366:      return true;
        5:  366-block  0
        -:  367:    }
        -:  368:#undef __INSERT_REGEX_MATCHER
        -:  369:
        -:  370:  template<typename _TraitsT>
        -:  371:  template<bool __icase, bool __collate>
        -:  372:    void
    #####:  373:    _Compiler<_TraitsT>::
        -:  374:    _M_insert_any_matcher_ecma()
        -:  375:    {
    #####:  376:      _M_stack.push(_StateSeqT(*_M_nfa,
    #####:  377:	_M_nfa->_M_insert_matcher
        -:  378:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
        -:  379:	    (_M_traits))));
    #####:  380:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb1ELb1EEEvv:
    #####:  373:    _Compiler<_TraitsT>::
        -:  374:    _M_insert_any_matcher_ecma()
        -:  375:    {
    #####:  376:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  376-block  0
    %%%%%:  376-block  1
    %%%%%:  376-block  2
    $$$$$:  376-block  3
    $$$$$:  376-block  4
    $$$$$:  376-block  5
    #####:  377:	_M_nfa->_M_insert_matcher
    %%%%%:  377-block  0
        -:  378:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
        -:  379:	    (_M_traits))));
    #####:  380:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb1ELb0EEEvv:
    #####:  373:    _Compiler<_TraitsT>::
        -:  374:    _M_insert_any_matcher_ecma()
        -:  375:    {
    #####:  376:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  376-block  0
    %%%%%:  376-block  1
    %%%%%:  376-block  2
    $$$$$:  376-block  3
    $$$$$:  376-block  4
    $$$$$:  376-block  5
    #####:  377:	_M_nfa->_M_insert_matcher
    %%%%%:  377-block  0
        -:  378:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
        -:  379:	    (_M_traits))));
    #####:  380:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb0ELb1EEEvv:
    #####:  373:    _Compiler<_TraitsT>::
        -:  374:    _M_insert_any_matcher_ecma()
        -:  375:    {
    #####:  376:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  376-block  0
    %%%%%:  376-block  1
    %%%%%:  376-block  2
    $$$$$:  376-block  3
    $$$$$:  376-block  4
    $$$$$:  376-block  5
    #####:  377:	_M_nfa->_M_insert_matcher
    %%%%%:  377-block  0
        -:  378:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
        -:  379:	    (_M_traits))));
    #####:  380:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE26_M_insert_any_matcher_ecmaILb0ELb0EEEvv:
    #####:  373:    _Compiler<_TraitsT>::
        -:  374:    _M_insert_any_matcher_ecma()
        -:  375:    {
    #####:  376:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  376-block  0
    %%%%%:  376-block  1
    %%%%%:  376-block  2
    $$$$$:  376-block  3
    $$$$$:  376-block  4
    $$$$$:  376-block  5
    #####:  377:	_M_nfa->_M_insert_matcher
    %%%%%:  377-block  0
        -:  378:	  (_AnyMatcher<_TraitsT, true, __icase, __collate>
        -:  379:	    (_M_traits))));
    #####:  380:    }
------------------
        -:  381:
        -:  382:  template<typename _TraitsT>
        -:  383:  template<bool __icase, bool __collate>
        -:  384:    void
    #####:  385:    _Compiler<_TraitsT>::
        -:  386:    _M_insert_any_matcher_posix()
        -:  387:    {
    #####:  388:      _M_stack.push(_StateSeqT(*_M_nfa,
    #####:  389:	_M_nfa->_M_insert_matcher
        -:  390:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
        -:  391:	    (_M_traits))));
    #####:  392:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb1ELb1EEEvv:
    #####:  385:    _Compiler<_TraitsT>::
        -:  386:    _M_insert_any_matcher_posix()
        -:  387:    {
    #####:  388:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  388-block  0
    %%%%%:  388-block  1
    %%%%%:  388-block  2
    $$$$$:  388-block  3
    $$$$$:  388-block  4
    $$$$$:  388-block  5
    #####:  389:	_M_nfa->_M_insert_matcher
    %%%%%:  389-block  0
        -:  390:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
        -:  391:	    (_M_traits))));
    #####:  392:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb1ELb0EEEvv:
    #####:  385:    _Compiler<_TraitsT>::
        -:  386:    _M_insert_any_matcher_posix()
        -:  387:    {
    #####:  388:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  388-block  0
    %%%%%:  388-block  1
    %%%%%:  388-block  2
    $$$$$:  388-block  3
    $$$$$:  388-block  4
    $$$$$:  388-block  5
    #####:  389:	_M_nfa->_M_insert_matcher
    %%%%%:  389-block  0
        -:  390:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
        -:  391:	    (_M_traits))));
    #####:  392:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb0ELb1EEEvv:
    #####:  385:    _Compiler<_TraitsT>::
        -:  386:    _M_insert_any_matcher_posix()
        -:  387:    {
    #####:  388:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  388-block  0
    %%%%%:  388-block  1
    %%%%%:  388-block  2
    $$$$$:  388-block  3
    $$$$$:  388-block  4
    $$$$$:  388-block  5
    #####:  389:	_M_nfa->_M_insert_matcher
    %%%%%:  389-block  0
        -:  390:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
        -:  391:	    (_M_traits))));
    #####:  392:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE27_M_insert_any_matcher_posixILb0ELb0EEEvv:
    #####:  385:    _Compiler<_TraitsT>::
        -:  386:    _M_insert_any_matcher_posix()
        -:  387:    {
    #####:  388:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  388-block  0
    %%%%%:  388-block  1
    %%%%%:  388-block  2
    $$$$$:  388-block  3
    $$$$$:  388-block  4
    $$$$$:  388-block  5
    #####:  389:	_M_nfa->_M_insert_matcher
    %%%%%:  389-block  0
        -:  390:	  (_AnyMatcher<_TraitsT, false, __icase, __collate>
        -:  391:	    (_M_traits))));
    #####:  392:    }
------------------
        -:  393:
        -:  394:  template<typename _TraitsT>
        -:  395:  template<bool __icase, bool __collate>
        -:  396:    void
       3*:  397:    _Compiler<_TraitsT>::
        -:  398:    _M_insert_char_matcher()
        -:  399:    {
       3*:  400:      _M_stack.push(_StateSeqT(*_M_nfa,
       3*:  401:	_M_nfa->_M_insert_matcher
        -:  402:	  (_CharMatcher<_TraitsT, __icase, __collate>
       3*:  403:	    (_M_value[0], _M_traits))));
       3*:  404:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb1ELb1EEEvv:
    #####:  397:    _Compiler<_TraitsT>::
        -:  398:    _M_insert_char_matcher()
        -:  399:    {
    #####:  400:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  400-block  0
    %%%%%:  400-block  1
    %%%%%:  400-block  2
    $$$$$:  400-block  3
    $$$$$:  400-block  4
    $$$$$:  400-block  5
    #####:  401:	_M_nfa->_M_insert_matcher
    %%%%%:  401-block  0
        -:  402:	  (_CharMatcher<_TraitsT, __icase, __collate>
    #####:  403:	    (_M_value[0], _M_traits))));
    #####:  404:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb1ELb0EEEvv:
    #####:  397:    _Compiler<_TraitsT>::
        -:  398:    _M_insert_char_matcher()
        -:  399:    {
    #####:  400:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  400-block  0
    %%%%%:  400-block  1
    %%%%%:  400-block  2
    $$$$$:  400-block  3
    $$$$$:  400-block  4
    $$$$$:  400-block  5
    #####:  401:	_M_nfa->_M_insert_matcher
    %%%%%:  401-block  0
        -:  402:	  (_CharMatcher<_TraitsT, __icase, __collate>
    #####:  403:	    (_M_value[0], _M_traits))));
    #####:  404:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb0ELb1EEEvv:
    #####:  397:    _Compiler<_TraitsT>::
        -:  398:    _M_insert_char_matcher()
        -:  399:    {
    #####:  400:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  400-block  0
    %%%%%:  400-block  1
    %%%%%:  400-block  2
    $$$$$:  400-block  3
    $$$$$:  400-block  4
    $$$$$:  400-block  5
    #####:  401:	_M_nfa->_M_insert_matcher
    %%%%%:  401-block  0
        -:  402:	  (_CharMatcher<_TraitsT, __icase, __collate>
    #####:  403:	    (_M_value[0], _M_traits))));
    #####:  404:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE22_M_insert_char_matcherILb0ELb0EEEvv:
        3:  397:    _Compiler<_TraitsT>::
        -:  398:    _M_insert_char_matcher()
        -:  399:    {
        3:  400:      _M_stack.push(_StateSeqT(*_M_nfa,
        3:  400-block  0
        3:  400-block  1
        3:  400-block  2
    $$$$$:  400-block  3
    $$$$$:  400-block  4
    $$$$$:  400-block  5
        3:  401:	_M_nfa->_M_insert_matcher
        3:  401-block  0
        -:  402:	  (_CharMatcher<_TraitsT, __icase, __collate>
        3:  403:	    (_M_value[0], _M_traits))));
        3:  404:    }
------------------
        -:  405:
        -:  406:  template<typename _TraitsT>
        -:  407:  template<bool __icase, bool __collate>
        -:  408:    void
      12*:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_character_class_matcher()
        -:  411:    {
        -:  412:      __glibcxx_assert(_M_value.size() == 1);
      12*:  413:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher
      12*:  414:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
      12*:  415:      __matcher._M_add_character_class(_M_value, false);
      12*:  416:      __matcher._M_ready();
      12*:  417:      _M_stack.push(_StateSeqT(*_M_nfa,
      12*:  418:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
      12*:  419:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb1ELb1EEEvv:
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_character_class_matcher()
        -:  411:    {
        -:  412:      __glibcxx_assert(_M_value.size() == 1);
    #####:  413:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher
    $$$$$:  413-block  0
    #####:  414:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  414-block  0
    %%%%%:  414-block  1
    #####:  415:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  415-block  0
    #####:  416:      __matcher._M_ready();
    %%%%%:  416-block  0
    #####:  417:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  417-block  0
    %%%%%:  417-block  1
    %%%%%:  417-block  2
    $$$$$:  417-block  3
    $$$$$:  417-block  4
    $$$$$:  417-block  5
    $$$$$:  417-block  6
    $$$$$:  417-block  7
    #####:  418:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  418-block  0
    #####:  419:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb1ELb0EEEvv:
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_character_class_matcher()
        -:  411:    {
        -:  412:      __glibcxx_assert(_M_value.size() == 1);
    #####:  413:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher
    $$$$$:  413-block  0
    #####:  414:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  414-block  0
    %%%%%:  414-block  1
    #####:  415:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  415-block  0
    #####:  416:      __matcher._M_ready();
    %%%%%:  416-block  0
    #####:  417:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  417-block  0
    %%%%%:  417-block  1
    %%%%%:  417-block  2
    $$$$$:  417-block  3
    $$$$$:  417-block  4
    $$$$$:  417-block  5
    $$$$$:  417-block  6
    $$$$$:  417-block  7
    #####:  418:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  418-block  0
    #####:  419:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb0ELb1EEEvv:
    #####:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_character_class_matcher()
        -:  411:    {
        -:  412:      __glibcxx_assert(_M_value.size() == 1);
    #####:  413:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher
    $$$$$:  413-block  0
    #####:  414:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
    %%%%%:  414-block  0
    %%%%%:  414-block  1
    #####:  415:      __matcher._M_add_character_class(_M_value, false);
    %%%%%:  415-block  0
    #####:  416:      __matcher._M_ready();
    %%%%%:  416-block  0
    #####:  417:      _M_stack.push(_StateSeqT(*_M_nfa,
    %%%%%:  417-block  0
    %%%%%:  417-block  1
    %%%%%:  417-block  2
    $$$$$:  417-block  3
    $$$$$:  417-block  4
    $$$$$:  417-block  5
    $$$$$:  417-block  6
    $$$$$:  417-block  7
    #####:  418:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  418-block  0
    #####:  419:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE33_M_insert_character_class_matcherILb0ELb0EEEvv:
       12:  409:    _Compiler<_TraitsT>::
        -:  410:    _M_insert_character_class_matcher()
        -:  411:    {
        -:  412:      __glibcxx_assert(_M_value.size() == 1);
       12:  413:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher
    $$$$$:  413-block  0
       12:  414:	(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);
       12:  414-block  0
       12:  414-block  1
       12:  415:      __matcher._M_add_character_class(_M_value, false);
       12:  415-block  0
       12:  416:      __matcher._M_ready();
       12:  416-block  0
       12:  417:      _M_stack.push(_StateSeqT(*_M_nfa,
       12:  417-block  0
       12:  417-block  1
       12:  417-block  2
    $$$$$:  417-block  3
    $$$$$:  417-block  4
    $$$$$:  417-block  5
    $$$$$:  417-block  6
    $$$$$:  417-block  7
       12:  418:	_M_nfa->_M_insert_matcher(std::move(__matcher))));
       12:  418-block  0
       12:  419:    }
------------------
        -:  420:
        -:  421:  template<typename _TraitsT>
        -:  422:  template<bool __icase, bool __collate>
        -:  423:    void
       5*:  424:    _Compiler<_TraitsT>::
        -:  425:    _M_insert_bracket_matcher(bool __neg)
        -:  426:    {
       5*:  427:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);
       5*:  428:      pair<bool, _CharT> __last_char; // Optional<_CharT>
       5*:  429:      __last_char.first = false;
       5*:  430:      if (!(_M_flags & regex_constants::ECMAScript))
        -:  431:	{
    #####:  432:	  if (_M_try_char())
        -:  433:	    {
    #####:  434:	      __last_char.first = true;
    #####:  435:	      __last_char.second = _M_value[0];
        -:  436:	    }
    #####:  437:	  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
        -:  438:	    {
    #####:  439:	      __last_char.first = true;
    #####:  440:	      __last_char.second = '-';
        -:  441:	    }
        -:  442:	}
      10*:  443:      while (_M_expression_term(__last_char, __matcher));
       5*:  444:      if (__last_char.first)
       5*:  445:	__matcher._M_add_char(__last_char.second);
       5*:  446:      __matcher._M_ready();
      10*:  447:      _M_stack.push(_StateSeqT(
       5*:  448:		      *_M_nfa,
       5*:  449:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
       5*:  450:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb1ELb1EEEvb:
    #####:  424:    _Compiler<_TraitsT>::
        -:  425:    _M_insert_bracket_matcher(bool __neg)
        -:  426:    {
    #####:  427:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  427-block  0
    $$$$$:  427-block  1
    #####:  428:      pair<bool, _CharT> __last_char; // Optional<_CharT>
    #####:  429:      __last_char.first = false;
    #####:  430:      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  430-block  0
        -:  431:	{
    #####:  432:	  if (_M_try_char())
    %%%%%:  432-block  0
    %%%%%:  432-block  1
        -:  433:	    {
    #####:  434:	      __last_char.first = true;
    #####:  435:	      __last_char.second = _M_value[0];
    %%%%%:  435-block  0
    %%%%%:  435-block  1
        -:  436:	    }
    #####:  437:	  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  437-block  0
    %%%%%:  437-block  1
        -:  438:	    {
    #####:  439:	      __last_char.first = true;
    #####:  440:	      __last_char.second = '-';
    %%%%%:  440-block  0
        -:  441:	    }
        -:  442:	}
    #####:  443:      while (_M_expression_term(__last_char, __matcher));
    %%%%%:  443-block  0
    %%%%%:  443-block  1
    #####:  444:      if (__last_char.first)
    %%%%%:  444-block  0
    #####:  445:	__matcher._M_add_char(__last_char.second);
    %%%%%:  445-block  0
    #####:  446:      __matcher._M_ready();
    %%%%%:  446-block  0
    #####:  447:      _M_stack.push(_StateSeqT(
    %%%%%:  447-block  0
    %%%%%:  447-block  1
    $$$$$:  447-block  2
    $$$$$:  447-block  3
    $$$$$:  447-block  4
    $$$$$:  447-block  5
    $$$$$:  447-block  6
    #####:  448:		      *_M_nfa,
    %%%%%:  448-block  0
    #####:  449:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  449-block  0
    #####:  450:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb1ELb0EEEvb:
    #####:  424:    _Compiler<_TraitsT>::
        -:  425:    _M_insert_bracket_matcher(bool __neg)
        -:  426:    {
    #####:  427:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  427-block  0
    $$$$$:  427-block  1
    #####:  428:      pair<bool, _CharT> __last_char; // Optional<_CharT>
    #####:  429:      __last_char.first = false;
    #####:  430:      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  430-block  0
        -:  431:	{
    #####:  432:	  if (_M_try_char())
    %%%%%:  432-block  0
    %%%%%:  432-block  1
        -:  433:	    {
    #####:  434:	      __last_char.first = true;
    #####:  435:	      __last_char.second = _M_value[0];
    %%%%%:  435-block  0
    %%%%%:  435-block  1
        -:  436:	    }
    #####:  437:	  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  437-block  0
    %%%%%:  437-block  1
        -:  438:	    {
    #####:  439:	      __last_char.first = true;
    #####:  440:	      __last_char.second = '-';
    %%%%%:  440-block  0
        -:  441:	    }
        -:  442:	}
    #####:  443:      while (_M_expression_term(__last_char, __matcher));
    %%%%%:  443-block  0
    %%%%%:  443-block  1
    #####:  444:      if (__last_char.first)
    %%%%%:  444-block  0
    #####:  445:	__matcher._M_add_char(__last_char.second);
    %%%%%:  445-block  0
    #####:  446:      __matcher._M_ready();
    %%%%%:  446-block  0
    #####:  447:      _M_stack.push(_StateSeqT(
    %%%%%:  447-block  0
    %%%%%:  447-block  1
    $$$$$:  447-block  2
    $$$$$:  447-block  3
    $$$$$:  447-block  4
    $$$$$:  447-block  5
    $$$$$:  447-block  6
    #####:  448:		      *_M_nfa,
    %%%%%:  448-block  0
    #####:  449:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  449-block  0
    #####:  450:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb0ELb1EEEvb:
    #####:  424:    _Compiler<_TraitsT>::
        -:  425:    _M_insert_bracket_matcher(bool __neg)
        -:  426:    {
    #####:  427:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);
    %%%%%:  427-block  0
    $$$$$:  427-block  1
    #####:  428:      pair<bool, _CharT> __last_char; // Optional<_CharT>
    #####:  429:      __last_char.first = false;
    #####:  430:      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  430-block  0
        -:  431:	{
    #####:  432:	  if (_M_try_char())
    %%%%%:  432-block  0
    %%%%%:  432-block  1
        -:  433:	    {
    #####:  434:	      __last_char.first = true;
    #####:  435:	      __last_char.second = _M_value[0];
    %%%%%:  435-block  0
    %%%%%:  435-block  1
        -:  436:	    }
    #####:  437:	  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  437-block  0
    %%%%%:  437-block  1
        -:  438:	    {
    #####:  439:	      __last_char.first = true;
    #####:  440:	      __last_char.second = '-';
    %%%%%:  440-block  0
        -:  441:	    }
        -:  442:	}
    #####:  443:      while (_M_expression_term(__last_char, __matcher));
    %%%%%:  443-block  0
    %%%%%:  443-block  1
    #####:  444:      if (__last_char.first)
    %%%%%:  444-block  0
    #####:  445:	__matcher._M_add_char(__last_char.second);
    %%%%%:  445-block  0
    #####:  446:      __matcher._M_ready();
    %%%%%:  446-block  0
    #####:  447:      _M_stack.push(_StateSeqT(
    %%%%%:  447-block  0
    %%%%%:  447-block  1
    $$$$$:  447-block  2
    $$$$$:  447-block  3
    $$$$$:  447-block  4
    $$$$$:  447-block  5
    $$$$$:  447-block  6
    #####:  448:		      *_M_nfa,
    %%%%%:  448-block  0
    #####:  449:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
    %%%%%:  449-block  0
    #####:  450:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE25_M_insert_bracket_matcherILb0ELb0EEEvb:
        5:  424:    _Compiler<_TraitsT>::
        -:  425:    _M_insert_bracket_matcher(bool __neg)
        -:  426:    {
        5:  427:      _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);
        5:  427-block  0
    $$$$$:  427-block  1
        5:  428:      pair<bool, _CharT> __last_char; // Optional<_CharT>
        5:  429:      __last_char.first = false;
        5:  430:      if (!(_M_flags & regex_constants::ECMAScript))
        5:  430-block  0
        -:  431:	{
    #####:  432:	  if (_M_try_char())
    %%%%%:  432-block  0
    %%%%%:  432-block  1
        -:  433:	    {
    #####:  434:	      __last_char.first = true;
    #####:  435:	      __last_char.second = _M_value[0];
    %%%%%:  435-block  0
    %%%%%:  435-block  1
        -:  436:	    }
    #####:  437:	  else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  437-block  0
    %%%%%:  437-block  1
        -:  438:	    {
    #####:  439:	      __last_char.first = true;
    #####:  440:	      __last_char.second = '-';
    %%%%%:  440-block  0
        -:  441:	    }
        -:  442:	}
       10:  443:      while (_M_expression_term(__last_char, __matcher));
       10:  443-block  0
       10:  443-block  1
        5:  444:      if (__last_char.first)
        5:  444-block  0
        5:  445:	__matcher._M_add_char(__last_char.second);
        5:  445-block  0
        5:  446:      __matcher._M_ready();
        5:  446-block  0
       10:  447:      _M_stack.push(_StateSeqT(
        5:  447-block  0
        5:  447-block  1
    $$$$$:  447-block  2
    $$$$$:  447-block  3
    $$$$$:  447-block  4
    $$$$$:  447-block  5
    $$$$$:  447-block  6
        5:  448:		      *_M_nfa,
        5:  448-block  0
        5:  449:		      _M_nfa->_M_insert_matcher(std::move(__matcher))));
        5:  449-block  0
        5:  450:    }
------------------
        -:  451:
        -:  452:  template<typename _TraitsT>
        -:  453:  template<bool __icase, bool __collate>
        -:  454:    bool
      10*:  455:    _Compiler<_TraitsT>::
        -:  456:    _M_expression_term(pair<bool, _CharT>& __last_char,
        -:  457:		       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)
        -:  458:    {
      10*:  459:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
       5*:  460:	return false;
        -:  461:
      20*:  462:      const auto __push_char = [&](_CharT __ch)
        -:  463:      {
       5*:  464:	if (__last_char.first)
    %%%%%:  464-block  0
    %%%%%:  464-block  1
    %%%%%:  464-block  2
        5:  464-block  3
    #####:  465:	  __matcher._M_add_char(__last_char.second);
    %%%%%:  465-block  0
    %%%%%:  465-block  1
    %%%%%:  465-block  2
    %%%%%:  465-block  3
        -:  466:	else
       5*:  467:	  __last_char.first = true;
    %%%%%:  467-block  0
    %%%%%:  467-block  1
    %%%%%:  467-block  2
        5:  467-block  3
       5*:  468:	__last_char.second = __ch;
        -:  469:      };
       5*:  470:      const auto __flush = [&]
        -:  471:      {
    #####:  472:	if (__last_char.first)
    %%%%%:  472-block  0
    %%%%%:  472-block  1
    %%%%%:  472-block  2
    %%%%%:  472-block  3
        -:  473:	  {
    #####:  474:	    __matcher._M_add_char(__last_char.second);
    %%%%%:  474-block  0
    %%%%%:  474-block  1
    %%%%%:  474-block  2
    %%%%%:  474-block  3
    #####:  475:	    __last_char.first = false;
        -:  476:	  }
        -:  477:      };
        -:  478:
       5*:  479:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
        -:  480:	{
    #####:  481:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    #####:  482:	  if (__symbol.size() == 1)
    #####:  483:	    __push_char(__symbol[0]);
        -:  484:	  else
    #####:  485:	    __flush();
        -:  486:	}
       5*:  487:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
        -:  488:	{
    #####:  489:	  __flush();
    #####:  490:	  __matcher._M_add_equivalence_class(_M_value);
        -:  491:	}
       5*:  492:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
        -:  493:	{
    #####:  494:	  __flush();
    #####:  495:	  __matcher._M_add_character_class(_M_value, false);
        -:  496:	}
       5*:  497:      else if (_M_try_char())
       5*:  498:	__push_char(_M_value[0]);
        -:  499:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  500:      // except when the '-' is the first or last character in the bracket
        -:  501:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  502:      // normal character. Also see above, where _M_expression_term gets called.
        -:  503:      //
        -:  504:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  505:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  506:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  507:      //
        -:  508:      // It turns out that no one reads BNFs ;)
    #####:  509:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
        -:  510:	{
    #####:  511:	  if (!__last_char.first)
        -:  512:	    {
    #####:  513:	      if (!(_M_flags & regex_constants::ECMAScript))
        -:  514:		{
    #####:  515:		  if (_M_match_token(_ScannerT::_S_token_bracket_end))
        -:  516:		    {
    #####:  517:		      __push_char('-');
    #####:  518:		      return false;
        -:  519:		    }
    #####:  520:		  __throw_regex_error(
        -:  521:		    regex_constants::error_range,
        -:  522:		    "Unexpected dash in bracket expression. For POSIX syntax, "
        -:  523:		    "a dash is not treated literally only when it is at "
        -:  524:		    "beginning or end.");
        -:  525:		}
    #####:  526:	      __push_char('-');
        -:  527:	    }
        -:  528:	  else
        -:  529:	    {
    #####:  530:	      if (_M_try_char())
        -:  531:		{
    #####:  532:		  __matcher._M_make_range(__last_char.second, _M_value[0]);
    #####:  533:		  __last_char.first = false;
        -:  534:		}
    #####:  535:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
        -:  536:		{
    #####:  537:		  __matcher._M_make_range(__last_char.second, '-');
    #####:  538:		  __last_char.first = false;
        -:  539:		}
        -:  540:	      else
        -:  541:		{
    #####:  542:		  if (_M_scanner._M_get_token()
    #####:  543:		      != _ScannerT::_S_token_bracket_end)
    #####:  544:		    __throw_regex_error(
        -:  545:		      regex_constants::error_range,
        -:  546:		      "Character is expected after a dash.");
    #####:  547:		  __push_char('-');
        -:  548:		}
        -:  549:	    }
        -:  550:	}
    #####:  551:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
        -:  552:	{
    #####:  553:	  __flush();
    #####:  554:	  __matcher._M_add_character_class(_M_value,
    #####:  555:					   _M_ctype.is(_CtypeT::upper,
    #####:  556:						       _M_value[0]));
        -:  557:	}
        -:  558:      else
    #####:  559:	__throw_regex_error(regex_constants::error_brack,
        -:  560:			    "Unexpected character in bracket expression.");
        -:  561:
       5*:  562:      return true;
        -:  563:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb1ELb1EEEbRSt4pairIbcERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
    #####:  455:    _Compiler<_TraitsT>::
        -:  456:    _M_expression_term(pair<bool, _CharT>& __last_char,
        -:  457:		       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)
        -:  458:    {
    #####:  459:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  459-block  0
    %%%%%:  459-block  1
    #####:  460:	return false;
    %%%%%:  460-block  0
        -:  461:
    #####:  462:      const auto __push_char = [&](_CharT __ch)
        -:  463:      {
        -:  464:	if (__last_char.first)
        -:  465:	  __matcher._M_add_char(__last_char.second);
        -:  466:	else
        -:  467:	  __last_char.first = true;
        -:  468:	__last_char.second = __ch;
        -:  469:      };
    #####:  470:      const auto __flush = [&]
        -:  471:      {
        -:  472:	if (__last_char.first)
        -:  473:	  {
        -:  474:	    __matcher._M_add_char(__last_char.second);
        -:  475:	    __last_char.first = false;
        -:  476:	  }
        -:  477:      };
        -:  478:
    #####:  479:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  479-block  0
    %%%%%:  479-block  1
        -:  480:	{
    #####:  481:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  481-block  0
    %%%%%:  481-block  1
    $$$$$:  481-block  2
    #####:  482:	  if (__symbol.size() == 1)
    %%%%%:  482-block  0
    #####:  483:	    __push_char(__symbol[0]);
    %%%%%:  483-block  0
    %%%%%:  483-block  1
        -:  484:	  else
    #####:  485:	    __flush();
    %%%%%:  485-block  0
        -:  486:	}
    #####:  487:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  487-block  0
    %%%%%:  487-block  1
        -:  488:	{
    #####:  489:	  __flush();
    %%%%%:  489-block  0
    #####:  490:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  490-block  0
        -:  491:	}
    #####:  492:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  492-block  0
    %%%%%:  492-block  1
        -:  493:	{
    #####:  494:	  __flush();
    %%%%%:  494-block  0
    #####:  495:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  495-block  0
        -:  496:	}
    #####:  497:      else if (_M_try_char())
    %%%%%:  497-block  0
    %%%%%:  497-block  1
    #####:  498:	__push_char(_M_value[0]);
    %%%%%:  498-block  0
    %%%%%:  498-block  1
        -:  499:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  500:      // except when the '-' is the first or last character in the bracket
        -:  501:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  502:      // normal character. Also see above, where _M_expression_term gets called.
        -:  503:      //
        -:  504:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  505:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  506:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  507:      //
        -:  508:      // It turns out that no one reads BNFs ;)
    #####:  509:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
    %%%%%:  509-block  1
        -:  510:	{
    #####:  511:	  if (!__last_char.first)
    %%%%%:  511-block  0
        -:  512:	    {
    #####:  513:	      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  513-block  0
        -:  514:		{
    #####:  515:		  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  515-block  0
    %%%%%:  515-block  1
        -:  516:		    {
    #####:  517:		      __push_char('-');
    %%%%%:  517-block  0
    #####:  518:		      return false;
    %%%%%:  518-block  0
        -:  519:		    }
    #####:  520:		  __throw_regex_error(
    %%%%%:  520-block  0
        -:  521:		    regex_constants::error_range,
        -:  522:		    "Unexpected dash in bracket expression. For POSIX syntax, "
        -:  523:		    "a dash is not treated literally only when it is at "
        -:  524:		    "beginning or end.");
        -:  525:		}
    #####:  526:	      __push_char('-');
    %%%%%:  526-block  0
        -:  527:	    }
        -:  528:	  else
        -:  529:	    {
    #####:  530:	      if (_M_try_char())
    %%%%%:  530-block  0
    %%%%%:  530-block  1
        -:  531:		{
    #####:  532:		  __matcher._M_make_range(__last_char.second, _M_value[0]);
    %%%%%:  532-block  0
    %%%%%:  532-block  1
    #####:  533:		  __last_char.first = false;
    %%%%%:  533-block  0
        -:  534:		}
    #####:  535:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  535-block  0
    %%%%%:  535-block  1
        -:  536:		{
    #####:  537:		  __matcher._M_make_range(__last_char.second, '-');
    %%%%%:  537-block  0
    #####:  538:		  __last_char.first = false;
    %%%%%:  538-block  0
        -:  539:		}
        -:  540:	      else
        -:  541:		{
    #####:  542:		  if (_M_scanner._M_get_token()
    #####:  543:		      != _ScannerT::_S_token_bracket_end)
    %%%%%:  543-block  0
    #####:  544:		    __throw_regex_error(
    %%%%%:  544-block  0
        -:  545:		      regex_constants::error_range,
        -:  546:		      "Character is expected after a dash.");
    #####:  547:		  __push_char('-');
    %%%%%:  547-block  0
        -:  548:		}
        -:  549:	    }
        -:  550:	}
    #####:  551:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  551-block  0
    %%%%%:  551-block  1
        -:  552:	{
    #####:  553:	  __flush();
    %%%%%:  553-block  0
    #####:  554:	  __matcher._M_add_character_class(_M_value,
    #####:  555:					   _M_ctype.is(_CtypeT::upper,
    #####:  556:						       _M_value[0]));
    %%%%%:  556-block  0
    %%%%%:  556-block  1
        -:  557:	}
        -:  558:      else
    #####:  559:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  559-block  0
        -:  560:			    "Unexpected character in bracket expression.");
        -:  561:
    #####:  562:      return true;
    %%%%%:  562-block  0
        -:  563:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb1ELb0EEEbRSt4pairIbcERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
    #####:  455:    _Compiler<_TraitsT>::
        -:  456:    _M_expression_term(pair<bool, _CharT>& __last_char,
        -:  457:		       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)
        -:  458:    {
    #####:  459:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  459-block  0
    %%%%%:  459-block  1
    #####:  460:	return false;
    %%%%%:  460-block  0
        -:  461:
    #####:  462:      const auto __push_char = [&](_CharT __ch)
        -:  463:      {
        -:  464:	if (__last_char.first)
        -:  465:	  __matcher._M_add_char(__last_char.second);
        -:  466:	else
        -:  467:	  __last_char.first = true;
        -:  468:	__last_char.second = __ch;
        -:  469:      };
    #####:  470:      const auto __flush = [&]
        -:  471:      {
        -:  472:	if (__last_char.first)
        -:  473:	  {
        -:  474:	    __matcher._M_add_char(__last_char.second);
        -:  475:	    __last_char.first = false;
        -:  476:	  }
        -:  477:      };
        -:  478:
    #####:  479:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  479-block  0
    %%%%%:  479-block  1
        -:  480:	{
    #####:  481:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  481-block  0
    %%%%%:  481-block  1
    $$$$$:  481-block  2
    #####:  482:	  if (__symbol.size() == 1)
    %%%%%:  482-block  0
    #####:  483:	    __push_char(__symbol[0]);
    %%%%%:  483-block  0
    %%%%%:  483-block  1
        -:  484:	  else
    #####:  485:	    __flush();
    %%%%%:  485-block  0
        -:  486:	}
    #####:  487:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  487-block  0
    %%%%%:  487-block  1
        -:  488:	{
    #####:  489:	  __flush();
    %%%%%:  489-block  0
    #####:  490:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  490-block  0
        -:  491:	}
    #####:  492:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  492-block  0
    %%%%%:  492-block  1
        -:  493:	{
    #####:  494:	  __flush();
    %%%%%:  494-block  0
    #####:  495:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  495-block  0
        -:  496:	}
    #####:  497:      else if (_M_try_char())
    %%%%%:  497-block  0
    %%%%%:  497-block  1
    #####:  498:	__push_char(_M_value[0]);
    %%%%%:  498-block  0
    %%%%%:  498-block  1
        -:  499:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  500:      // except when the '-' is the first or last character in the bracket
        -:  501:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  502:      // normal character. Also see above, where _M_expression_term gets called.
        -:  503:      //
        -:  504:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  505:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  506:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  507:      //
        -:  508:      // It turns out that no one reads BNFs ;)
    #####:  509:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
    %%%%%:  509-block  1
        -:  510:	{
    #####:  511:	  if (!__last_char.first)
    %%%%%:  511-block  0
        -:  512:	    {
    #####:  513:	      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  513-block  0
        -:  514:		{
    #####:  515:		  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  515-block  0
    %%%%%:  515-block  1
        -:  516:		    {
    #####:  517:		      __push_char('-');
    %%%%%:  517-block  0
    #####:  518:		      return false;
    %%%%%:  518-block  0
        -:  519:		    }
    #####:  520:		  __throw_regex_error(
    %%%%%:  520-block  0
        -:  521:		    regex_constants::error_range,
        -:  522:		    "Unexpected dash in bracket expression. For POSIX syntax, "
        -:  523:		    "a dash is not treated literally only when it is at "
        -:  524:		    "beginning or end.");
        -:  525:		}
    #####:  526:	      __push_char('-');
    %%%%%:  526-block  0
        -:  527:	    }
        -:  528:	  else
        -:  529:	    {
    #####:  530:	      if (_M_try_char())
    %%%%%:  530-block  0
    %%%%%:  530-block  1
        -:  531:		{
    #####:  532:		  __matcher._M_make_range(__last_char.second, _M_value[0]);
    %%%%%:  532-block  0
    %%%%%:  532-block  1
    #####:  533:		  __last_char.first = false;
    %%%%%:  533-block  0
        -:  534:		}
    #####:  535:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  535-block  0
    %%%%%:  535-block  1
        -:  536:		{
    #####:  537:		  __matcher._M_make_range(__last_char.second, '-');
    %%%%%:  537-block  0
    #####:  538:		  __last_char.first = false;
    %%%%%:  538-block  0
        -:  539:		}
        -:  540:	      else
        -:  541:		{
    #####:  542:		  if (_M_scanner._M_get_token()
    #####:  543:		      != _ScannerT::_S_token_bracket_end)
    %%%%%:  543-block  0
    #####:  544:		    __throw_regex_error(
    %%%%%:  544-block  0
        -:  545:		      regex_constants::error_range,
        -:  546:		      "Character is expected after a dash.");
    #####:  547:		  __push_char('-');
    %%%%%:  547-block  0
        -:  548:		}
        -:  549:	    }
        -:  550:	}
    #####:  551:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  551-block  0
    %%%%%:  551-block  1
        -:  552:	{
    #####:  553:	  __flush();
    %%%%%:  553-block  0
    #####:  554:	  __matcher._M_add_character_class(_M_value,
    #####:  555:					   _M_ctype.is(_CtypeT::upper,
    #####:  556:						       _M_value[0]));
    %%%%%:  556-block  0
    %%%%%:  556-block  1
        -:  557:	}
        -:  558:      else
    #####:  559:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  559-block  0
        -:  560:			    "Unexpected character in bracket expression.");
        -:  561:
    #####:  562:      return true;
    %%%%%:  562-block  0
        -:  563:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb0ELb1EEEbRSt4pairIbcERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
    #####:  455:    _Compiler<_TraitsT>::
        -:  456:    _M_expression_term(pair<bool, _CharT>& __last_char,
        -:  457:		       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)
        -:  458:    {
    #####:  459:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  459-block  0
    %%%%%:  459-block  1
    #####:  460:	return false;
    %%%%%:  460-block  0
        -:  461:
    #####:  462:      const auto __push_char = [&](_CharT __ch)
        -:  463:      {
        -:  464:	if (__last_char.first)
        -:  465:	  __matcher._M_add_char(__last_char.second);
        -:  466:	else
        -:  467:	  __last_char.first = true;
        -:  468:	__last_char.second = __ch;
        -:  469:      };
    #####:  470:      const auto __flush = [&]
        -:  471:      {
        -:  472:	if (__last_char.first)
        -:  473:	  {
        -:  474:	    __matcher._M_add_char(__last_char.second);
        -:  475:	    __last_char.first = false;
        -:  476:	  }
        -:  477:      };
        -:  478:
    #####:  479:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
    %%%%%:  479-block  0
    %%%%%:  479-block  1
        -:  480:	{
    #####:  481:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  481-block  0
    %%%%%:  481-block  1
    $$$$$:  481-block  2
    #####:  482:	  if (__symbol.size() == 1)
    %%%%%:  482-block  0
    #####:  483:	    __push_char(__symbol[0]);
    %%%%%:  483-block  0
    %%%%%:  483-block  1
        -:  484:	  else
    #####:  485:	    __flush();
    %%%%%:  485-block  0
        -:  486:	}
    #####:  487:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
    %%%%%:  487-block  0
    %%%%%:  487-block  1
        -:  488:	{
    #####:  489:	  __flush();
    %%%%%:  489-block  0
    #####:  490:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  490-block  0
        -:  491:	}
    #####:  492:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
    %%%%%:  492-block  0
    %%%%%:  492-block  1
        -:  493:	{
    #####:  494:	  __flush();
    %%%%%:  494-block  0
    #####:  495:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  495-block  0
        -:  496:	}
    #####:  497:      else if (_M_try_char())
    %%%%%:  497-block  0
    %%%%%:  497-block  1
    #####:  498:	__push_char(_M_value[0]);
    %%%%%:  498-block  0
    %%%%%:  498-block  1
        -:  499:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  500:      // except when the '-' is the first or last character in the bracket
        -:  501:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  502:      // normal character. Also see above, where _M_expression_term gets called.
        -:  503:      //
        -:  504:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  505:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  506:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  507:      //
        -:  508:      // It turns out that no one reads BNFs ;)
    #####:  509:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
    %%%%%:  509-block  1
        -:  510:	{
    #####:  511:	  if (!__last_char.first)
    %%%%%:  511-block  0
        -:  512:	    {
    #####:  513:	      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  513-block  0
        -:  514:		{
    #####:  515:		  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  515-block  0
    %%%%%:  515-block  1
        -:  516:		    {
    #####:  517:		      __push_char('-');
    %%%%%:  517-block  0
    #####:  518:		      return false;
    %%%%%:  518-block  0
        -:  519:		    }
    #####:  520:		  __throw_regex_error(
    %%%%%:  520-block  0
        -:  521:		    regex_constants::error_range,
        -:  522:		    "Unexpected dash in bracket expression. For POSIX syntax, "
        -:  523:		    "a dash is not treated literally only when it is at "
        -:  524:		    "beginning or end.");
        -:  525:		}
    #####:  526:	      __push_char('-');
    %%%%%:  526-block  0
        -:  527:	    }
        -:  528:	  else
        -:  529:	    {
    #####:  530:	      if (_M_try_char())
    %%%%%:  530-block  0
    %%%%%:  530-block  1
        -:  531:		{
    #####:  532:		  __matcher._M_make_range(__last_char.second, _M_value[0]);
    %%%%%:  532-block  0
    %%%%%:  532-block  1
    #####:  533:		  __last_char.first = false;
    %%%%%:  533-block  0
        -:  534:		}
    #####:  535:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  535-block  0
    %%%%%:  535-block  1
        -:  536:		{
    #####:  537:		  __matcher._M_make_range(__last_char.second, '-');
    %%%%%:  537-block  0
    #####:  538:		  __last_char.first = false;
    %%%%%:  538-block  0
        -:  539:		}
        -:  540:	      else
        -:  541:		{
    #####:  542:		  if (_M_scanner._M_get_token()
    #####:  543:		      != _ScannerT::_S_token_bracket_end)
    %%%%%:  543-block  0
    #####:  544:		    __throw_regex_error(
    %%%%%:  544-block  0
        -:  545:		      regex_constants::error_range,
        -:  546:		      "Character is expected after a dash.");
    #####:  547:		  __push_char('-');
    %%%%%:  547-block  0
        -:  548:		}
        -:  549:	    }
        -:  550:	}
    #####:  551:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  551-block  0
    %%%%%:  551-block  1
        -:  552:	{
    #####:  553:	  __flush();
    %%%%%:  553-block  0
    #####:  554:	  __matcher._M_add_character_class(_M_value,
    #####:  555:					   _M_ctype.is(_CtypeT::upper,
    #####:  556:						       _M_value[0]));
    %%%%%:  556-block  0
    %%%%%:  556-block  1
        -:  557:	}
        -:  558:      else
    #####:  559:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  559-block  0
        -:  560:			    "Unexpected character in bracket expression.");
        -:  561:
    #####:  562:      return true;
    %%%%%:  562-block  0
        -:  563:    }
------------------
_ZNSt8__detail9_CompilerINSt7__cxx1112regex_traitsIcEEE18_M_expression_termILb0ELb0EEEbRSt4pairIbcERNS_15_BracketMatcherIS3_XT_EXT0_EEE:
       10:  455:    _Compiler<_TraitsT>::
        -:  456:    _M_expression_term(pair<bool, _CharT>& __last_char,
        -:  457:		       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)
        -:  458:    {
       10:  459:      if (_M_match_token(_ScannerT::_S_token_bracket_end))
       10:  459-block  0
       10:  459-block  1
        5:  460:	return false;
        5:  460-block  0
        -:  461:
        5:  462:      const auto __push_char = [&](_CharT __ch)
        -:  463:      {
        -:  464:	if (__last_char.first)
        -:  465:	  __matcher._M_add_char(__last_char.second);
        -:  466:	else
        -:  467:	  __last_char.first = true;
        -:  468:	__last_char.second = __ch;
        -:  469:      };
        5:  470:      const auto __flush = [&]
        -:  471:      {
        -:  472:	if (__last_char.first)
        -:  473:	  {
        -:  474:	    __matcher._M_add_char(__last_char.second);
        -:  475:	    __last_char.first = false;
        -:  476:	  }
        -:  477:      };
        -:  478:
        5:  479:      if (_M_match_token(_ScannerT::_S_token_collsymbol))
        5:  479-block  0
        5:  479-block  1
        -:  480:	{
    #####:  481:	  auto __symbol = __matcher._M_add_collate_element(_M_value);
    %%%%%:  481-block  0
    %%%%%:  481-block  1
    $$$$$:  481-block  2
    #####:  482:	  if (__symbol.size() == 1)
    %%%%%:  482-block  0
    #####:  483:	    __push_char(__symbol[0]);
    %%%%%:  483-block  0
    %%%%%:  483-block  1
        -:  484:	  else
    #####:  485:	    __flush();
    %%%%%:  485-block  0
        -:  486:	}
        5:  487:      else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))
        5:  487-block  0
        5:  487-block  1
        -:  488:	{
    #####:  489:	  __flush();
    %%%%%:  489-block  0
    #####:  490:	  __matcher._M_add_equivalence_class(_M_value);
    %%%%%:  490-block  0
        -:  491:	}
        5:  492:      else if (_M_match_token(_ScannerT::_S_token_char_class_name))
        5:  492-block  0
        5:  492-block  1
        -:  493:	{
    #####:  494:	  __flush();
    %%%%%:  494-block  0
    #####:  495:	  __matcher._M_add_character_class(_M_value, false);
    %%%%%:  495-block  0
        -:  496:	}
        5:  497:      else if (_M_try_char())
        5:  497-block  0
        5:  497-block  1
        5:  498:	__push_char(_M_value[0]);
        5:  498-block  0
        5:  498-block  1
        -:  499:      // POSIX doesn't allow '-' as a start-range char (say [a-z--0]),
        -:  500:      // except when the '-' is the first or last character in the bracket
        -:  501:      // expression ([--0]). ECMAScript treats all '-' after a range as a
        -:  502:      // normal character. Also see above, where _M_expression_term gets called.
        -:  503:      //
        -:  504:      // As a result, POSIX rejects [-----], but ECMAScript doesn't.
        -:  505:      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.
        -:  506:      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.
        -:  507:      //
        -:  508:      // It turns out that no one reads BNFs ;)
    #####:  509:      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  509-block  0
    %%%%%:  509-block  1
        -:  510:	{
    #####:  511:	  if (!__last_char.first)
    %%%%%:  511-block  0
        -:  512:	    {
    #####:  513:	      if (!(_M_flags & regex_constants::ECMAScript))
    %%%%%:  513-block  0
        -:  514:		{
    #####:  515:		  if (_M_match_token(_ScannerT::_S_token_bracket_end))
    %%%%%:  515-block  0
    %%%%%:  515-block  1
        -:  516:		    {
    #####:  517:		      __push_char('-');
    %%%%%:  517-block  0
    #####:  518:		      return false;
    %%%%%:  518-block  0
        -:  519:		    }
    #####:  520:		  __throw_regex_error(
    %%%%%:  520-block  0
        -:  521:		    regex_constants::error_range,
        -:  522:		    "Unexpected dash in bracket expression. For POSIX syntax, "
        -:  523:		    "a dash is not treated literally only when it is at "
        -:  524:		    "beginning or end.");
        -:  525:		}
    #####:  526:	      __push_char('-');
    %%%%%:  526-block  0
        -:  527:	    }
        -:  528:	  else
        -:  529:	    {
    #####:  530:	      if (_M_try_char())
    %%%%%:  530-block  0
    %%%%%:  530-block  1
        -:  531:		{
    #####:  532:		  __matcher._M_make_range(__last_char.second, _M_value[0]);
    %%%%%:  532-block  0
    %%%%%:  532-block  1
    #####:  533:		  __last_char.first = false;
    %%%%%:  533-block  0
        -:  534:		}
    #####:  535:	      else if (_M_match_token(_ScannerT::_S_token_bracket_dash))
    %%%%%:  535-block  0
    %%%%%:  535-block  1
        -:  536:		{
    #####:  537:		  __matcher._M_make_range(__last_char.second, '-');
    %%%%%:  537-block  0
    #####:  538:		  __last_char.first = false;
    %%%%%:  538-block  0
        -:  539:		}
        -:  540:	      else
        -:  541:		{
    #####:  542:		  if (_M_scanner._M_get_token()
    #####:  543:		      != _ScannerT::_S_token_bracket_end)
    %%%%%:  543-block  0
    #####:  544:		    __throw_regex_error(
    %%%%%:  544-block  0
        -:  545:		      regex_constants::error_range,
        -:  546:		      "Character is expected after a dash.");
    #####:  547:		  __push_char('-');
    %%%%%:  547-block  0
        -:  548:		}
        -:  549:	    }
        -:  550:	}
    #####:  551:      else if (_M_match_token(_ScannerT::_S_token_quoted_class))
    %%%%%:  551-block  0
    %%%%%:  551-block  1
        -:  552:	{
    #####:  553:	  __flush();
    %%%%%:  553-block  0
    #####:  554:	  __matcher._M_add_character_class(_M_value,
    #####:  555:					   _M_ctype.is(_CtypeT::upper,
    #####:  556:						       _M_value[0]));
    %%%%%:  556-block  0
    %%%%%:  556-block  1
        -:  557:	}
        -:  558:      else
    #####:  559:	__throw_regex_error(regex_constants::error_brack,
    %%%%%:  559-block  0
        -:  560:			    "Unexpected character in bracket expression.");
        -:  561:
        5:  562:      return true;
        5:  562-block  0
        -:  563:    }
------------------
        -:  564:
        -:  565:  template<typename _TraitsT>
        -:  566:    bool
       46:  567:    _Compiler<_TraitsT>::
        -:  568:    _M_try_char()
        -:  569:    {
       46:  570:      bool __is_char = false;
       46:  571:      if (_M_match_token(_ScannerT::_S_token_oct_num))
       46:  571-block  0
        -:  572:	{
    #####:  573:	  __is_char = true;
    #####:  574:	  _M_value.assign(1, _M_cur_int_value(8));
    %%%%%:  574-block  0
        -:  575:	}
       46:  576:      else if (_M_match_token(_ScannerT::_S_token_hex_num))
       46:  576-block  0
        -:  577:	{
    #####:  578:	  __is_char = true;
    #####:  579:	  _M_value.assign(1, _M_cur_int_value(16));
    %%%%%:  579-block  0
        -:  580:	}
       46:  581:      else if (_M_match_token(_ScannerT::_S_token_ord_char))
       46:  581-block  0
        8:  582:	__is_char = true;
        8:  582-block  0
       46:  583:      return __is_char;
       46:  583-block  0
        -:  584:    }
        -:  585:
        -:  586:  template<typename _TraitsT>
        -:  587:    bool
      716:  588:    _Compiler<_TraitsT>::
        -:  589:    _M_match_token(_TokenT token)
        -:  590:    {
      716:  591:      if (token == _M_scanner._M_get_token())
      716:  591-block  0
        -:  592:	{
       67:  593:	  _M_value = _M_scanner._M_get_value();
       67:  593-block  0
       67:  594:	  _M_scanner._M_advance();
       67:  595:	  return true;
        -:  596:	}
      649:  597:      return false;
      649:  597-block  0
        -:  598:    }
        -:  599:
        -:  600:  template<typename _TraitsT>
        -:  601:    int
    #####:  602:    _Compiler<_TraitsT>::
        -:  603:    _M_cur_int_value(int __radix)
        -:  604:    {
    #####:  605:      long __v = 0;
    #####:  606:      for (typename _StringT::size_type __i = 0;
    %%%%%:  606-block  0
    #####:  607:	   __i < _M_value.length(); ++__i)
    %%%%%:  607-block  0
    #####:  608:	__v =__v * __radix + _M_traits.value(_M_value[__i], __radix);
    %%%%%:  608-block  0
    #####:  609:      return __v;
    %%%%%:  609-block  0
        -:  610:    }
        -:  611:
        -:  612:  template<typename _TraitsT, bool __icase, bool __collate>
        -:  613:    bool
    4352*:  614:    _BracketMatcher<_TraitsT, __icase, __collate>::
        -:  615:    _M_apply(_CharT __ch, false_type) const
        -:  616:    {
   47352*:  617:      return [this, __ch]
        -:  618:      {
    4352*:  619:	if (std::binary_search(_M_char_set.begin(), _M_char_set.end(),
    %%%%%:  619-block  0
    %%%%%:  619-block  1
    %%%%%:  619-block  2
    $$$$$:  619-block  3
    %%%%%:  619-block  4
    %%%%%:  619-block  5
    $$$$$:  619-block  6
    %%%%%:  619-block  7
    %%%%%:  619-block  8
    %%%%%:  619-block  9
    $$$$$:  619-block 10
     4352:  619-block 11
     4352:  619-block 12
    $$$$$:  619-block 13
        -:  620:			       _M_translator._M_translate(__ch)))
       5*:  621:	  return true;
    %%%%%:  621-block  0
    %%%%%:  621-block  1
    %%%%%:  621-block  2
        5:  621-block  3
    4347*:  622:	auto __s = _M_translator._M_transform(__ch);
    %%%%%:  622-block  0
    %%%%%:  622-block  1
    $$$$$:  622-block  2
    %%%%%:  622-block  3
    %%%%%:  622-block  4
    %%%%%:  622-block  5
    $$$$$:  622-block  6
     4347:  622-block  7
    4347*:  623:	for (auto& __it : _M_range_set)
    %%%%%:  623-block  0
    %%%%%:  623-block  1
    %%%%%:  623-block  2
    %%%%%:  623-block  3
    %%%%%:  623-block  4
    %%%%%:  623-block  5
    %%%%%:  623-block  6
    %%%%%:  623-block  7
    %%%%%:  623-block  8
    %%%%%:  623-block  9
    %%%%%:  623-block 10
     4347:  623-block 11
    %%%%%:  623-block 12
    %%%%%:  623-block 13
    #####:  624:	  if (_M_translator._M_match_range(__it.first, __it.second, __s))
    %%%%%:  624-block  0
    %%%%%:  624-block  1
    #####:  625:	    return true;
    %%%%%:  625-block  0
    %%%%%:  625-block  1
    %%%%%:  625-block  2
    %%%%%:  625-block  3
    4347*:  626:	if (_M_traits.isctype(__ch, _M_class_set))
    %%%%%:  626-block  0
    %%%%%:  626-block  1
    %%%%%:  626-block  2
    %%%%%:  626-block  3
    %%%%%:  626-block  4
     4347:  626-block  5
      96*:  627:	  return true;
    %%%%%:  627-block  0
    %%%%%:  627-block  1
    %%%%%:  627-block  2
       96:  627-block  3
    8502*:  628:	if (std::find(_M_equiv_set.begin(), _M_equiv_set.end(),
    %%%%%:  628-block  0
    $$$$$:  628-block  1
    $$$$$:  628-block  2
    %%%%%:  628-block  3
    $$$$$:  628-block  4
    $$$$$:  628-block  5
    %%%%%:  628-block  6
    $$$$$:  628-block  7
    $$$$$:  628-block  8
     4251:  628-block  9
    $$$$$:  628-block 10
    $$$$$:  628-block 11
    4251*:  629:		      _M_traits.transform_primary(&__ch, &__ch+1))
   12753*:  630:	    != _M_equiv_set.end())
    %%%%%:  630-block  0
    %%%%%:  630-block  1
    $$$$$:  630-block  2
    %%%%%:  630-block  3
    %%%%%:  630-block  4
    $$$$$:  630-block  5
    %%%%%:  630-block  6
    %%%%%:  630-block  7
    $$$$$:  630-block  8
     4251:  630-block  9
     4251:  630-block 10
    $$$$$:  630-block 11
    #####:  631:	  return true;
    %%%%%:  631-block  0
    %%%%%:  631-block  1
    %%%%%:  631-block  2
    %%%%%:  631-block  3
    4251*:  632:	for (auto& __it : _M_neg_class_set)
    %%%%%:  632-block  0
    %%%%%:  632-block  1
    %%%%%:  632-block  2
    %%%%%:  632-block  3
    %%%%%:  632-block  4
    %%%%%:  632-block  5
    %%%%%:  632-block  6
    %%%%%:  632-block  7
    %%%%%:  632-block  8
    %%%%%:  632-block  9
    %%%%%:  632-block 10
    %%%%%:  632-block 11
     4251:  632-block 12
     4251:  632-block 13
    %%%%%:  632-block 14
    %%%%%:  632-block 15
    #####:  633:	  if (!_M_traits.isctype(__ch, __it))
    %%%%%:  633-block  0
    %%%%%:  633-block  1
    %%%%%:  633-block  2
    %%%%%:  633-block  3
    #####:  634:	    return true;
    %%%%%:  634-block  0
    %%%%%:  634-block  1
    %%%%%:  634-block  2
    %%%%%:  634-block  3
    4251*:  635:	return false;
    %%%%%:  635-block  0
    %%%%%:  635-block  1
    %%%%%:  635-block  2
     4251:  635-block  3
    4352*:  636:      }() ^ _M_is_non_matching;
        -:  637:    }
        -:  638:} // namespace __detail
        -:  639:
        -:  640:_GLIBCXX_END_NAMESPACE_VERSION
        -:  641:} // namespace
